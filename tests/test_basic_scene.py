from __future__ import annotations

from typing import Any

import pytest

import scenex as snx


def test_basic_view(basic_view: snx.View) -> None:
    snx.show(basic_view)
    assert isinstance(basic_view.model_dump(), dict)
    assert isinstance(basic_view.model_dump_json(), str)


@pytest.mark.parametrize("backend", ["pygfx"])
def test_view_tree_matches_native(basic_view: snx.View, backend: str) -> None:
    """Test that the structure of the tree generated by the model matches the
    structure of the tree generated by the native backend."""
    basic_view._get_adaptor(backend=backend, create=True)

    def obj_name(obj: Any) -> str:
        # normalize all cameras to "Camera"
        if "camera" in (name := f"{obj.__class__.__name__}").lower():
            return "Camera"
        return name

    model_tree = snx.util.tree_dict(basic_view.scene, obj_name=obj_name)
    native_scene = basic_view.scene._get_native(backend=backend)
    view_tree = snx.util.tree_dict(native_scene, obj_name=obj_name)
    assert isinstance(view_tree, dict)
    # remove the ambient light from the view tree for equality check
    if "AmbientLight" in view_tree["Scene"]:
        view_tree["Scene"].remove("AmbientLight")
    assert model_tree == view_tree

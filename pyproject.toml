# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# read more about configuring hatch at:
# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

# https://peps.python.org/pep-0621/
[project]
name = "scenex"
dynamic = ["version"]
description = "Declarative scene graph model and backend abstraction."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "BSD-3-Clause" }
authors = [{ name = "Talley Lambert", email = "talley.lambert@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dependencies = ["cmap>=0.5", "numpy>=2", "psygnal>=0.11.1", "pydantic>=2.10", "pylinalg"]

[project.optional-dependencies]
jupyter = [
    "ipywidgets >=8.0.5",
    "jupyter >=1.1",
    "jupyter_rfb >=0.3.3",
    # Note that this dep is only needed for Vispy, something like simplejpeg would work fine if just pygfx.
    "glfw",
    # Otherwise jupyter_rfb will use PNG, which is apparently slower
    "simplejpeg",
]
pyqt = [
    "pyqt6 >=6.4,!=6.6",
    "pyqt6 >=6.5.3; python_version >= '3.12'",
    "qtpy >=2",
    "superqt[iconify] >=0.7.2",
]
wx= [
    "wxpython >=4.2.2",
]
pygfx = ["pygfx>=0.9.0"]
vispy = ["vispy>=0.15.0", "pyopengl"]
imgui = [
    # 1.6.3 breaks type checking, 1.92 not working with pygfx
    "imgui-bundle>=1.6,!=1.6.3,<1.92.0",
]

[dependency-groups]
test = ["pytest>=8", "pytest-cov>=6"]
testqt = [{ include-group = "test" }, "pytest-qt >=4.4"]
testjupyter = [
    { include-group = "test" },
    "glfw", # Vispy in particular needs SOME backend to get an OpenGL context
]
docs = [
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-api-autonav>=0.2.1",
    "mkdocs-material>=9.6.12",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-spellcheck[all]>=1.1.1",
    "mkdocstrings-python>=1.16.10",
]
dev = [
    { include-group = "test" },
    { include-group = "docs" },
    "scenex[pygfx,vispy,imgui,wx,jupyter,pyqt]",
    "imageio[tifffile] >=2.20",
    "ipython",
    "mypy",
    "pdbpp; sys_platform != 'win32'",
    "pre-commit-uv",
    "rich",
    "ruff",
    "pyright>=1.1.392",
]

[project.urls]
homepage = "https://github.com/pyapp-kit/scenex"
repository = "https://github.com/pyapp-kit/scenex"


# https://docs.astral.sh/ruff
[tool.ruff]
line-length = 88
target-version = "py310"
fix = true
unsafe-fixes = true
src = ["src"]
exclude = ["_stubs"]

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
pydocstyle = { convention = "numpy" }
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "D417", # Missing argument descriptions in Docstrings
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TC",   # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
ignore = [
    "D401", # First line should be in imperative mood
    "D100", # Missing docstring in public module
    "D105", # Missing docstring in magic method
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S"]

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = false # default is false

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true
plugins = ["pydantic.mypy"]
untyped_calls_exclude = ["rendercanvas", "IPython", "pytestqt"]

[[tool.mypy.overrides]]
module = ["rendercanvas.*"]
follow_untyped_imports = true

[[tool.mypy.overrides]]
module = ["pygfx.*", "vispy.*", "wgpu.*", "glfw.*", "pylinalg.*", "qtpy.*", "ipywidgets.*", "IPython.*", "jupyter", "jupyter_rfb.*", "wx.*"]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = false
init_typed = false
warn_required_dynamic_aliases = true

[tool.pyright]
include = ["src"]
pythonVersion = "3.10"
enableExperimentalFeatures = true
verboseOutput = true
venv = ".venv"

# https://docs.pytest.org/
[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["--color=yes"]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore:'count' is passed as positional argument::vispy",
]

# https://coverage.readthedocs.io/
[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "pass",
]

[tool.coverage.run]
source = ["scenex"]

[tool.check-manifest]
ignore = [".pre-commit-config.yaml", ".ruff_cache/**/*", "tests/**/*"]

[tool.typos.default]
extend-ignore-identifiers-re = ["(?i)nd?.*", "ser_schema"]
